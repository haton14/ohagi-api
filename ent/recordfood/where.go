// Code generated by entc, DO NOT EDIT.

package recordfood

import (
	"entgo.io/ent/dialect/sql"
	"github.com/haton14/ohagi-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RecordID applies equality check predicate on the "record_id" field. It's identical to RecordIDEQ.
func RecordID(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordID), v))
	})
}

// FoodID applies equality check predicate on the "food_id" field. It's identical to FoodIDEQ.
func FoodID(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFoodID), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// RecordIDEQ applies the EQ predicate on the "record_id" field.
func RecordIDEQ(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordID), v))
	})
}

// RecordIDNEQ applies the NEQ predicate on the "record_id" field.
func RecordIDNEQ(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordID), v))
	})
}

// RecordIDIn applies the In predicate on the "record_id" field.
func RecordIDIn(vs ...int) predicate.RecordFood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecordID), v...))
	})
}

// RecordIDNotIn applies the NotIn predicate on the "record_id" field.
func RecordIDNotIn(vs ...int) predicate.RecordFood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecordID), v...))
	})
}

// RecordIDGT applies the GT predicate on the "record_id" field.
func RecordIDGT(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordID), v))
	})
}

// RecordIDGTE applies the GTE predicate on the "record_id" field.
func RecordIDGTE(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordID), v))
	})
}

// RecordIDLT applies the LT predicate on the "record_id" field.
func RecordIDLT(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordID), v))
	})
}

// RecordIDLTE applies the LTE predicate on the "record_id" field.
func RecordIDLTE(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordID), v))
	})
}

// FoodIDEQ applies the EQ predicate on the "food_id" field.
func FoodIDEQ(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFoodID), v))
	})
}

// FoodIDNEQ applies the NEQ predicate on the "food_id" field.
func FoodIDNEQ(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFoodID), v))
	})
}

// FoodIDIn applies the In predicate on the "food_id" field.
func FoodIDIn(vs ...int) predicate.RecordFood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFoodID), v...))
	})
}

// FoodIDNotIn applies the NotIn predicate on the "food_id" field.
func FoodIDNotIn(vs ...int) predicate.RecordFood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFoodID), v...))
	})
}

// FoodIDGT applies the GT predicate on the "food_id" field.
func FoodIDGT(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFoodID), v))
	})
}

// FoodIDGTE applies the GTE predicate on the "food_id" field.
func FoodIDGTE(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFoodID), v))
	})
}

// FoodIDLT applies the LT predicate on the "food_id" field.
func FoodIDLT(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFoodID), v))
	})
}

// FoodIDLTE applies the LTE predicate on the "food_id" field.
func FoodIDLTE(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFoodID), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.RecordFood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.RecordFood {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordFood(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RecordFood) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RecordFood) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RecordFood) predicate.RecordFood {
	return predicate.RecordFood(func(s *sql.Selector) {
		p(s.Not())
	})
}
