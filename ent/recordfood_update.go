// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/haton14/ohagi-api/ent/predicate"
	"github.com/haton14/ohagi-api/ent/recordfood"
)

// RecordFoodUpdate is the builder for updating RecordFood entities.
type RecordFoodUpdate struct {
	config
	hooks    []Hook
	mutation *RecordFoodMutation
}

// Where appends a list predicates to the RecordFoodUpdate builder.
func (rfu *RecordFoodUpdate) Where(ps ...predicate.RecordFood) *RecordFoodUpdate {
	rfu.mutation.Where(ps...)
	return rfu
}

// SetRecordID sets the "record_id" field.
func (rfu *RecordFoodUpdate) SetRecordID(i int) *RecordFoodUpdate {
	rfu.mutation.ResetRecordID()
	rfu.mutation.SetRecordID(i)
	return rfu
}

// AddRecordID adds i to the "record_id" field.
func (rfu *RecordFoodUpdate) AddRecordID(i int) *RecordFoodUpdate {
	rfu.mutation.AddRecordID(i)
	return rfu
}

// SetFoodID sets the "food_id" field.
func (rfu *RecordFoodUpdate) SetFoodID(i int) *RecordFoodUpdate {
	rfu.mutation.ResetFoodID()
	rfu.mutation.SetFoodID(i)
	return rfu
}

// AddFoodID adds i to the "food_id" field.
func (rfu *RecordFoodUpdate) AddFoodID(i int) *RecordFoodUpdate {
	rfu.mutation.AddFoodID(i)
	return rfu
}

// SetAmount sets the "amount" field.
func (rfu *RecordFoodUpdate) SetAmount(f float64) *RecordFoodUpdate {
	rfu.mutation.ResetAmount()
	rfu.mutation.SetAmount(f)
	return rfu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (rfu *RecordFoodUpdate) SetNillableAmount(f *float64) *RecordFoodUpdate {
	if f != nil {
		rfu.SetAmount(*f)
	}
	return rfu
}

// AddAmount adds f to the "amount" field.
func (rfu *RecordFoodUpdate) AddAmount(f float64) *RecordFoodUpdate {
	rfu.mutation.AddAmount(f)
	return rfu
}

// Mutation returns the RecordFoodMutation object of the builder.
func (rfu *RecordFoodUpdate) Mutation() *RecordFoodMutation {
	return rfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rfu *RecordFoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rfu.hooks) == 0 {
		if err = rfu.check(); err != nil {
			return 0, err
		}
		affected, err = rfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordFoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfu.check(); err != nil {
				return 0, err
			}
			rfu.mutation = mutation
			affected, err = rfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rfu.hooks) - 1; i >= 0; i-- {
			if rfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfu *RecordFoodUpdate) SaveX(ctx context.Context) int {
	affected, err := rfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rfu *RecordFoodUpdate) Exec(ctx context.Context) error {
	_, err := rfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfu *RecordFoodUpdate) ExecX(ctx context.Context) {
	if err := rfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfu *RecordFoodUpdate) check() error {
	if v, ok := rfu.mutation.RecordID(); ok {
		if err := recordfood.RecordIDValidator(v); err != nil {
			return &ValidationError{Name: "record_id", err: fmt.Errorf("ent: validator failed for field \"record_id\": %w", err)}
		}
	}
	if v, ok := rfu.mutation.FoodID(); ok {
		if err := recordfood.FoodIDValidator(v); err != nil {
			return &ValidationError{Name: "food_id", err: fmt.Errorf("ent: validator failed for field \"food_id\": %w", err)}
		}
	}
	if v, ok := rfu.mutation.Amount(); ok {
		if err := recordfood.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	return nil
}

func (rfu *RecordFoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recordfood.Table,
			Columns: recordfood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recordfood.FieldID,
			},
		},
	}
	if ps := rfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfu.mutation.RecordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldRecordID,
		})
	}
	if value, ok := rfu.mutation.AddedRecordID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldRecordID,
		})
	}
	if value, ok := rfu.mutation.FoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldFoodID,
		})
	}
	if value, ok := rfu.mutation.AddedFoodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldFoodID,
		})
	}
	if value, ok := rfu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: recordfood.FieldAmount,
		})
	}
	if value, ok := rfu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: recordfood.FieldAmount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordfood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RecordFoodUpdateOne is the builder for updating a single RecordFood entity.
type RecordFoodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecordFoodMutation
}

// SetRecordID sets the "record_id" field.
func (rfuo *RecordFoodUpdateOne) SetRecordID(i int) *RecordFoodUpdateOne {
	rfuo.mutation.ResetRecordID()
	rfuo.mutation.SetRecordID(i)
	return rfuo
}

// AddRecordID adds i to the "record_id" field.
func (rfuo *RecordFoodUpdateOne) AddRecordID(i int) *RecordFoodUpdateOne {
	rfuo.mutation.AddRecordID(i)
	return rfuo
}

// SetFoodID sets the "food_id" field.
func (rfuo *RecordFoodUpdateOne) SetFoodID(i int) *RecordFoodUpdateOne {
	rfuo.mutation.ResetFoodID()
	rfuo.mutation.SetFoodID(i)
	return rfuo
}

// AddFoodID adds i to the "food_id" field.
func (rfuo *RecordFoodUpdateOne) AddFoodID(i int) *RecordFoodUpdateOne {
	rfuo.mutation.AddFoodID(i)
	return rfuo
}

// SetAmount sets the "amount" field.
func (rfuo *RecordFoodUpdateOne) SetAmount(f float64) *RecordFoodUpdateOne {
	rfuo.mutation.ResetAmount()
	rfuo.mutation.SetAmount(f)
	return rfuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (rfuo *RecordFoodUpdateOne) SetNillableAmount(f *float64) *RecordFoodUpdateOne {
	if f != nil {
		rfuo.SetAmount(*f)
	}
	return rfuo
}

// AddAmount adds f to the "amount" field.
func (rfuo *RecordFoodUpdateOne) AddAmount(f float64) *RecordFoodUpdateOne {
	rfuo.mutation.AddAmount(f)
	return rfuo
}

// Mutation returns the RecordFoodMutation object of the builder.
func (rfuo *RecordFoodUpdateOne) Mutation() *RecordFoodMutation {
	return rfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rfuo *RecordFoodUpdateOne) Select(field string, fields ...string) *RecordFoodUpdateOne {
	rfuo.fields = append([]string{field}, fields...)
	return rfuo
}

// Save executes the query and returns the updated RecordFood entity.
func (rfuo *RecordFoodUpdateOne) Save(ctx context.Context) (*RecordFood, error) {
	var (
		err  error
		node *RecordFood
	)
	if len(rfuo.hooks) == 0 {
		if err = rfuo.check(); err != nil {
			return nil, err
		}
		node, err = rfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordFoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfuo.check(); err != nil {
				return nil, err
			}
			rfuo.mutation = mutation
			node, err = rfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfuo.hooks) - 1; i >= 0; i-- {
			if rfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfuo *RecordFoodUpdateOne) SaveX(ctx context.Context) *RecordFood {
	node, err := rfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rfuo *RecordFoodUpdateOne) Exec(ctx context.Context) error {
	_, err := rfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfuo *RecordFoodUpdateOne) ExecX(ctx context.Context) {
	if err := rfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfuo *RecordFoodUpdateOne) check() error {
	if v, ok := rfuo.mutation.RecordID(); ok {
		if err := recordfood.RecordIDValidator(v); err != nil {
			return &ValidationError{Name: "record_id", err: fmt.Errorf("ent: validator failed for field \"record_id\": %w", err)}
		}
	}
	if v, ok := rfuo.mutation.FoodID(); ok {
		if err := recordfood.FoodIDValidator(v); err != nil {
			return &ValidationError{Name: "food_id", err: fmt.Errorf("ent: validator failed for field \"food_id\": %w", err)}
		}
	}
	if v, ok := rfuo.mutation.Amount(); ok {
		if err := recordfood.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	return nil
}

func (rfuo *RecordFoodUpdateOne) sqlSave(ctx context.Context) (_node *RecordFood, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recordfood.Table,
			Columns: recordfood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recordfood.FieldID,
			},
		},
	}
	id, ok := rfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RecordFood.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recordfood.FieldID)
		for _, f := range fields {
			if !recordfood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recordfood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfuo.mutation.RecordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldRecordID,
		})
	}
	if value, ok := rfuo.mutation.AddedRecordID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldRecordID,
		})
	}
	if value, ok := rfuo.mutation.FoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldFoodID,
		})
	}
	if value, ok := rfuo.mutation.AddedFoodID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recordfood.FieldFoodID,
		})
	}
	if value, ok := rfuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: recordfood.FieldAmount,
		})
	}
	if value, ok := rfuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: recordfood.FieldAmount,
		})
	}
	_node = &RecordFood{config: rfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordfood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
